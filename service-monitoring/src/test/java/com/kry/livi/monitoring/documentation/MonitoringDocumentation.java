package com.kry.livi.monitoring.documentation;

import org.springframework.restdocs.headers.HeaderDescriptor;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.test.web.reactive.server.EntityExchangeResult;

import java.util.List;
import java.util.function.Consumer;

import static com.epages.restdocs.WireMockDocumentation.wiremockJson;
import static com.epages.restdocs.apispec.WebTestClientRestDocumentationWrapper.document;
import static com.kry.livi.monitoring.documentation.ErrorDocumentation.errorResponseBodyDescription;
import static java.util.List.of;
import static org.springframework.http.HttpHeaders.CONTENT_TYPE;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.restdocs.headers.HeaderDocumentation.headerWithName;
import static org.springframework.restdocs.headers.HeaderDocumentation.responseHeaders;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;

public final class MonitoringDocumentation {

    public static <T> Consumer<EntityExchangeResult<T>> findAllDocumentation() {
        return document(
                "monitoring_findAll",
                wiremockJson(),
                responseHeaders(responseHeaderDescription()),
                responseFields().andWithPrefix("[].", responseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> findByIdDocumentation() {
        return document(
                "monitoring_findById",
                wiremockJson(),
                responseHeaders(responseHeaderDescription()),
                responseFields(responseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> findByIdErrorDocumentation() {
        return document(
                "monitoring_findById_error",
                wiremockJson(),
                responseHeaders(responseHeaderDescription()),
                responseFields(errorResponseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> createDocumentation() {
        return document(
                "monitoring_create",
                wiremockJson(),
                requestFields(requestBodyDescription()),
                responseHeaders(responseHeaderDescription()),
                responseFields(responseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> createErrorDocumentation() {
        return document(
                "monitoring_create_error",
                wiremockJson(),
                requestFields(requestBodyDescription()),
                responseHeaders(responseHeaderDescription()),
                responseFields(errorResponseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> updateDocumentation() {
        return document(
                "monitoring_update",
                wiremockJson(),
                requestFields(requestBodyDescription()),
                responseHeaders(responseHeaderDescription()),
                responseFields(responseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> updateErrorDocumentation() {
        return document(
                "monitoring_update_error",
                wiremockJson(),
                requestFields(requestBodyDescription()),
                responseHeaders(responseHeaderDescription()),
                responseFields(errorResponseBodyDescription())
        );
    }

    public static <T> Consumer<EntityExchangeResult<T>> deleteDocumentation() {
        return document(
                "monitoring_delete",
                wiremockJson()
        );
    }

    private static List<HeaderDescriptor> responseHeaderDescription() {
        return of(
                headerWithName(CONTENT_TYPE).description(APPLICATION_JSON_VALUE)
        );
    }

    private static List<FieldDescriptor> requestBodyDescription() {
        return of(
                fieldWithPath("name").type(STRING)
                        .description("Name given by client application"),
                fieldWithPath("url").type(STRING)
                        .description("URL of service given by client application")
        );
    }

    private static List<FieldDescriptor> responseBodyDescription() {
        return of(
                fieldWithPath("id")
                        .type(NUMBER)
                        .description("Id of service (generated by application)"),
                fieldWithPath("name")
                        .type(STRING)
                        .description("Name given by client application"),
                fieldWithPath("url")
                        .type(STRING)
                        .description("URL of service given by client application"),
                fieldWithPath("createdAt")
                        .type(STRING)
                        .description("Create date of this service"),
                fieldWithPath("updatedAt")
                        .type(STRING)
                        .description("Update date of this service"),
                fieldWithPath("status")
                        .type(STRING)
                        .description("Status of service (can be 'OK' or 'FAIL')")
        );
    }
}
